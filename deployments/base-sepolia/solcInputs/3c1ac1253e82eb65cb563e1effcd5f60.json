{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/CloudRenderer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nstring constant END = '<defs> <style>.cls-cloud-1{fill: url(#linear-gradient-cloud);}.cls-cloud-1, .cls-cloud-2, .cls-cloud-3, .cls-cloud-4, .cls-cloud-5, .cls-cloud-6, .cls-cloud-7, .cls-cloud-8, .cls-cloud-9{stroke-width: 0px;}.cls-cloud-2{fill: url(#linear-gradient-cloud-2);}.cls-cloud-3{fill: #795b3c;}.cls-cloud-4{fill: #784b2d;}.cls-cloud-5{fill: #592b25;}.cls-cloud-6{fill: #a96d3c;}.cls-cloud-7{fill: #dbc075;}.cls-cloud-8{fill: #b18649;}.cls-cloud-9{fill: #b9ab39;}</style> <linearGradient id=\"linear-gradient-cloud\" x1=\"65.07\" y1=\"46.38\" x2=\"47.22\" y2=\"102.94\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#a5ddd1\"/> <stop offset=\".46\" stop-color=\"#3fa0a1\"/> <stop offset=\"1\" stop-color=\"#1b4c5d\"/> </linearGradient> <linearGradient id=\"linear-gradient-cloud-2\" x1=\"117.39\" y1=\"22.37\" x2=\"84.24\" y2=\"80.68\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#f2f2d2\"/> <stop offset=\".59\" stop-color=\"#68bbb7\"/> <stop offset=\"1\" stop-color=\"#236f7b\"/> </linearGradient> </defs> <g> <g> <path class=\"cls-cloud-7\" d=\"M150.8,48.25c2.08,1.19,5.19,4.28,7.14,5.9.75,1.49,2.3,3.07,3.42,4.35,1.14,4.06,4.44,7.68,4.35,15.53-.09,6.96-4.05,15.29-9.32,19.88-.68.59-2.07,1.72-2.79,2.17-1.69,1.06-3.41,1.56-5.28,2.17l-.62-.62c6.23-1.69,11.83-6.99,14.29-12.89,4.03-9.7,2.98-19.17-3.73-27.33-4.81-5.85-15.67-13.38-23.14-9.16,4.69-13.49-6.27-29.16-20.65-28.26v-1.86c14.23-.59,25.83,12.99,23.45,27.02,4.5-.14,8.97.88,12.89,3.11Z\"/> <path class=\"cls-cloud-9\" d=\"M147.7,97.63l.62.62c-2.52.83-2.64,1.21-2.79,1.24-.53.1-1.28-.08-1.86,0-3.34.46-4.87.22-7.76.31-4.65.14-9.32-.05-13.97,0-24.01.25-48.04-.06-72.05,0-5.38.01-10.78-.21-16.15.31-3.97-.14-7.83-.44-11.8,0-.74.14-1.6-.51-2.17-.62-.17-.03-.37-.18-.93-.31l.93-.93c6.12.67,67.36.03,80.43,0,9.56-.02,37.39.67,41.77.31,1.82-.15,3.98-.45,5.75-.93Z\"/> <path class=\"cls-cloud-4\" d=\"M59.5,3.53c-17.94,5.36-31.16,25.19-22.36,43.17-2.11-1.13-6-2.36-8.38-2.48-.03-.56-.7-.13-.93-.47-.09-.13.72-.1.62-.47,1.74.07,3.28.48,4.97.78.54-.97-4.06-8.8,1.55-21.58,2.91-6.63,8.71-12.71,14.91-16.46-1.5,3.06,4.69-2.42,9.63-2.48Z\"/> <g> <path class=\"cls-cloud-1\" d=\"M53.91,40.49c8.27-.85,12.32,5.29,12.73,12.73-1.4,2.88,1.76-.88,5.28-.93,7.8-.12,7.93,7.81,8.54,8.07,10.47-.24,9.45,9.72,10.25,9.94,1.44-.89,4.97.27,6.21,1.24,4.01,3.13,1.92,10.49,4.81,5.9,1.22.68,3.37.74,4.97,3.57,3.49,6.2-.79,14.3-6.99,16.93l.47.31c-13.07.03-74.31.67-80.43,0-8.27-.9-16.56-7.53-18.94-15.53-1.8-6.03-.69-11.56,4.35-15.53l.62-.16c-.84-13.01,10.05-23.5,22.98-22.83,2.38.12,6.27,1.35,8.38,2.48,1.04.56,2.33,1.44,3.26,2.17,5.52,4.34,4.68,8.3,4.81,2.79.13-5.53,2.45-10.54,8.7-11.18Z\"/> <path class=\"cls-cloud-3\" d=\"M28.44,43.29c.1.37-.71.33-.62.47.23.34.9-.09.93.47-12.93-.68-23.82,9.82-22.98,22.83l-.62.16c-.69-4.11-.31-7.04,1.24-10.87.17-.42.42-.83.62-1.24.91-1.81,3.17-4.87,4.66-6.21,2.22-2,6.4-4.25,9.32-4.97,2.67-.66,4.73-.73,7.45-.62Z\"/> <path class=\"cls-cloud-7\" d=\"M101.73,77.45c-2.9,4.59-.8-2.77-4.81-5.9-1.24-.97-4.77-2.13-6.21-1.24-.79-.21.22-10.17-10.25-9.94-.61-.27-.74-8.19-8.54-8.07v-1.55c5.23-.13,9.28,2.77,9.32,8.23.63.59,8.94-.35,10.25,9.32,4.83-.2,9.25,4.13,9.32,9.01.2.33.76.06.93.16Z\"/> <path class=\"cls-cloud-7\" d=\"M67.57,51.67c-.16,1.15-.89,1.47-.93,1.55-.42-7.45-4.46-13.58-12.73-12.73l-.31-1.24c10.06-.99,14.61,7.75,13.97,12.42Z\"/> <path class=\"cls-cloud-4\" d=\"M53.6,39.25l.31,1.24c-6.25.64-8.56,5.65-8.7,11.18-.87.41-.78-4.56-.62-5.43.69-3.79,5.41-6.63,9.01-6.99Z\"/> <path class=\"cls-cloud-8\" d=\"M71.92,50.74v1.55c-3.52.05-6.68,3.81-5.28.93.04-.08.77-.41.93-1.55,2.15-1.16,2.84-.9,4.35-.93Z\"/> </g> <g> <path class=\"cls-cloud-2\" d=\"M102.98,23.1c1.3,8.17-1.87,2.39,5.9-1.55,1.92-.97,3.43-1.42,5.59-1.55,14.38-.9,25.34,14.77,20.65,28.26,7.47-4.22,18.33,3.31,23.14,9.16,6.7,8.16,7.76,17.63,3.73,27.33-2.45,5.9-8.05,11.2-14.29,12.89-1.77.48-3.93.78-5.75.93-4.38.36-32.21-.33-41.77-.31l-.47-.31c6.2-2.63,10.47-10.73,6.99-16.93-1.6-2.84-3.75-2.89-4.97-3.57-.18-.1-.73.17-.93-.16-.07-4.88-4.48-9.21-9.32-9.01-1.31-9.67-9.62-8.72-10.25-9.32-.04-5.46-4.08-8.36-9.32-8.23-1.51.04-2.2-.23-4.35.93.64-4.68-3.91-13.41-13.97-12.42-3.6.35-8.31,3.2-9.01,6.99-.16.88-.25,5.85.62,5.43-.13,5.51.71,1.55-4.81-2.79-.93-.73-2.22-1.61-3.26-2.17C28.34,28.73,41.56,8.89,59.5,3.53c19.12-5.71,40.98,3.9,43.48,19.56Z\"/> <path class=\"cls-cloud-8\" d=\"M114.47,18.13v1.86c-2.16.13-3.67.58-5.59,1.55.07-1.48-1.32-1.12.31-2.17,1.85-.61,3.28-1.16,5.28-1.24Z\"/> <path class=\"cls-cloud-6\" d=\"M109.19,19.37c-1.63,1.05-.24.7-.31,2.17-7.77,3.94-4.6,9.73-5.9,1.55.65.1,1.3-1.42,1.86-1.86,1.23-.98,2.89-1.38,4.35-1.86Z\"/> </g> </g> <g> <path class=\"cls-cloud-7\" d=\"M88.07,3.22c7.38,3.18,15.32,9.74,16.77,18.01-.56.45-1.21,1.97-1.86,1.86-2.5-15.67-24.36-25.27-43.48-19.56-4.94.06-11.12,5.54-9.63,2.48,11.22-6.79,26.12-8,38.2-2.79Z\"/> <g> <path class=\"cls-cloud-7\" d=\"M19.75,98.25l-.93.93c-3.74-.88-5.84-1.9-9.32-3.42-.52-.96-2.72-2.01-4.04-3.73-1.71-2.24-5.31-6.94-4.66-9.32,2.38,8,10.67,14.63,18.94,15.53Z\"/> <path class=\"cls-cloud-5\" d=\"M121.92,99.81l-1.24.62c-.31-.02-.62.01-.93,0-1.14-.04-2.28.02-3.42,0-20.6-.37-41.22.32-61.8,0-1.16-.02-2.77.13-3.73,0-.06,0-.89-.44-.93-.62,24.01-.06,48.04.25,72.05,0Z\"/> </g> </g> </g> </g>';\n\ncontract CloudRenderer {\n\n  function render(uint _tokenId) public pure returns (string memory) {\n    uint rand = uint(keccak256(abi.encodePacked(_tokenId+7)));\n    uint cloudCount = rand % 8; // Produces a number between 0 and 7\n\n    bytes[] memory clouds = new bytes[](cloudCount);\n    for(uint i = 0; i < cloudCount; i++) {\n      clouds[i] = abi.encodePacked(renderCloud(_tokenId, i));\n    }\n\n    bytes memory encodedClouds;\n    for(uint i = 0; i < cloudCount; i++) {\n      encodedClouds = abi.encodePacked(encodedClouds, clouds[i]);\n    }\n\n    return string(\n      encodedClouds\n    );\n  }\n\n  function renderCloud(uint _tokenId, uint _cloudNumber) public pure returns (string memory) {\n    bytes32 hash1 = keccak256(abi.encodePacked(_tokenId, _cloudNumber));\n    uint rand1 = uint(hash1);\n    bytes32 hash2 = keccak256(abi.encodePacked(_tokenId+1, _cloudNumber, rand1));\n    uint rand2 = uint(hash2);\n    return string(\n      abi.encodePacked(\n        '<g transform=\"translate(',\n        _buildOffset(-200, 1025, rand1),\n        ',',\n        _buildOffset(-100, 512, rand2),\n        ')\">',\n        END\n      )\n    );\n  }\n\n  function _buildOffset(int _min, int _max, uint _rand) internal pure returns (string memory) {\n    uint change = _rand % uint(_max - _min); \n    int newOffset = _min + int(change);\n    if(newOffset >= 0) {\n      return string(abi.encodePacked(Strings.toString(uint(newOffset))));\n    } else {\n      return string(abi.encodePacked(\"-\", Strings.toString(uint(newOffset*-1))));\n    }\n  }\n}\n"
    },
    "contracts/SeaRenderer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nstring constant SVG = '<g transform=\"translate(0,700)\"> <defs> <style>.cls-sea-1{fill: url(#linear-gradient-sea);}.cls-sea-1, .cls-sea-2, .cls-sea-3, .cls-sea-4, .cls-sea-5, .cls-sea-6, .cls-sea-7, .cls-sea-8, .cls-sea-9, .cls-sea-10, .cls-sea-11, .cls-sea-12, .cls-sea-13, .cls-sea-14, .cls-sea-15, .cls-sea-16, .cls-sea-17, .cls-sea-18, .cls-sea-19, .cls-sea-20, .cls-sea-21{stroke-width: 0px;}.cls-sea-2{fill: url(#linear-gradient-sea-4);}.cls-sea-3{fill: url(#linear-gradient-sea-2);}.cls-sea-4{fill: url(#linear-gradient-sea-3);}.cls-sea-5{fill: url(#linear-gradient-sea-8);}.cls-sea-6{fill: url(#linear-gradient-sea-7);}.cls-sea-7{fill: url(#linear-gradient-sea-5);}.cls-sea-8{fill: url(#linear-gradient-sea-6);}.cls-sea-9{fill: #5889ae;}.cls-sea-10{fill: #6e717c;}.cls-sea-11{fill: #86a3bd;}.cls-sea-12{fill: #a2aac4;}.cls-sea-13{fill: #322a32;}.cls-sea-14{fill: #417595;}.cls-sea-15{fill: #c3c7da;}.cls-sea-16{fill: #e2ddcd;}.cls-sea-17{fill: #e0e1c5;}.cls-sea-18{fill: #a5bad1;}.cls-sea-19{fill: #cedbea;}.cls-sea-20{fill: #e4deef;}.cls-sea-21{fill: #efe1a8;}</style> <linearGradient id=\"linear-gradient-sea\" x1=\"969.65\" y1=\"62.99\" x2=\"955.49\" y2=\"117.48\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#30a4b4\"/> <stop offset=\"1\" stop-color=\"#567b93\"/> </linearGradient> <linearGradient id=\"linear-gradient-sea-2\" x1=\"789.59\" y1=\"34.77\" x2=\"776.58\" y2=\"169.22\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#46b3c7\"/> <stop offset=\".48\" stop-color=\"#418496\"/> <stop offset=\"1\" stop-color=\"#060506\"/> </linearGradient> <linearGradient id=\"linear-gradient-sea-3\" x1=\"520.62\" y1=\"27.41\" x2=\"526.22\" y2=\"185.26\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#44b1c5\"/> <stop offset=\"1\" stop-color=\"#080909\"/> </linearGradient> <linearGradient id=\"linear-gradient-sea-4\" x1=\"234.99\" y1=\"25.8\" x2=\"238.35\" y2=\"184.48\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#48b4c6\"/> <stop offset=\"1\" stop-color=\"#09080a\"/> </linearGradient> <linearGradient id=\"linear-gradient-sea-5\" x1=\"514.41\" y1=\"221.64\" x2=\"513.85\" y2=\"357.22\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#d4c3d7\"/> <stop offset=\"1\" stop-color=\"#493b47\"/> </linearGradient> <linearGradient id=\"linear-gradient-sea-6\" x1=\"121.04\" y1=\"177.01\" x2=\"120.48\" y2=\"227.57\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#cecede\"/> <stop offset=\"1\" stop-color=\"#172939\"/> </linearGradient> <linearGradient id=\"linear-gradient-sea-7\" x1=\"227.92\" y1=\"142.86\" x2=\"227.52\" y2=\"200.09\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#c4c7d8\"/> <stop offset=\"1\" stop-color=\"#15181e\"/> </linearGradient> <linearGradient id=\"linear-gradient-sea-8\" x1=\"656.84\" y1=\"165.88\" x2=\"659.2\" y2=\"234.68\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#c9c9d8\"/> <stop offset=\".43\" stop-color=\"#38748f\"/> <stop offset=\"1\" stop-color=\"#121418\"/> </linearGradient> </defs> <g> <path class=\"cls-sea-13\" d=\"M1027.39,365.56c-.2,1.2.13,2.58,0,3.82H.5c-.13-1.24.2-2.61,0-3.82h1026.9Z\"/> <g> <path class=\"cls-sea-21\" d=\"M566.09,81.21q-6.27,3.82-12.54,7.63c-15.22-24.55-13.52-2.18-25.57-10.5-.78-2.5,1.99-5.6,4.01-7.63,11.46,3.33,22.38,7.86,34.1,10.5Z\"/> <g> <path class=\"cls-sea-1\" d=\"M1027.39,56.4c.03,30.85.03,61.7,0,92.56-32.71-10.34-65.67-20.51-97.78-32.44-6.41-2.38-46.19-16.51-48.14-18.13-.85-.71-.45-1.51-.5-2.39,15.4,3.81,40.39-.47,42.62-11.93,14.01,7.54,8.81-7.52,26.07,2.86-3.79-26.25,9.64,5.45,14.04-13.36,11.36,8.66,9.29-6,27.08,4.77-1.58-21.46,9.86-4.03,12.03-5.73,3.58-2.79-9.27-16.22,10.03-4.77,3.92-24.49,4.34,3.06,14.54-11.45Z\"/> <path class=\"cls-sea-16\" d=\"M1027.39,54.49c0,.64,0,1.27,0,1.91-10.2,14.51-10.62-13.04-14.54,11.45-19.3-11.45-6.45,1.98-10.03,4.77-2.17,1.7-13.61-15.73-12.03,5.73-17.79-10.77-15.72,3.89-27.08-4.77-4.4,18.81-17.83-12.9-14.04,13.36-17.27-10.38-12.06,4.68-26.07-2.86-2.23,11.46-27.22,15.73-42.62,11.93.05.87-.35,1.67.5,2.39,1.95,1.62,41.73,15.75,48.14,18.13,32.11,11.93,65.07,22.1,97.78,32.44,0,1.59,0,3.18,0,4.77-62.44-18.53-123.26-41.52-183.02-66.79-5.28.08-3.32,13.68-20.56-11.45,3.11-.13,12.01,13.2,13.54,13.36,2.85.3,2.13-8.3,20.06,1.91,21.81.9,53.29,12.73,66.19-8.59,11.23,5.59,8.61-1.35,18.05-.95,2.12.09,4.73,2.93,5.01,2.86.68-.17-2.86-10.65,5.01-10.5,2.5.05,5.63,4.75,6.02,4.77,2.77.18,1.56-10.69,13.04-2.86,10.1-8.16,17,.74,18.05,0,2.05-1.44-3.61-16.95,11.03-6.68-1.32-14.23,9.03-3.16,11.53-5.25,1.04-.86.22-8.22,2.51-9.06,3.39-1.26,5.48,9.03,13.54,0Z\"/> <g> <path class=\"cls-sea-3\" d=\"M823.82,75.49c17.23,25.13,15.27,11.53,20.56,11.45,59.76,25.28,120.58,48.26,183.02,66.79-.02,16.54.02,33.08,0,49.62-4.16-.58-8.02.55-12.03.95-15.88-4.5-32.18-7.19-48.14-11.45-60.55-16.18-46.66-20.94-56.66-27.67-16.26-10.94-43.6,6.77-62.18,6.68-20.18-4.61-40.56-8.49-60.67-13.36-31.08-7.53-81.18-22.3-111.82-32.44-10.26-3.4-80.45-28.2-84.24-30.53-10.97-6.76,21.33-2.31,14.04-8.59-1.49-1.28-18.22-.91-39.61-5.73-11.72-2.64-22.63-7.17-34.1-10.5,5.46-5.5,6.36-4.29,10.53,1.91,11.18-33.37,33.88-13.65,38.11-15.27,2.15-.82,1.94-7,4.01-7.63.49-.15,8.96,2.27,10.03,1.91,6.4-2.17-4.74-17.84,5.01-17.18,1.3.09,6.62,3.85,7.02,3.82,9.87-.83-3.68-13.82,5.01-20.99,7.14-5.89,17.35-1.54,22.06,4.77-3.03-41.67,52.33-13.53,15.54-2.39,4.95,3.98,13.21-1.59,20.56,2.39,8.75,4.74,1.89,13.67,11.03,11.45,10.51-2.55-8.29-18.2,3.01-20.04,3.67-.6,4.16,4.24,8.02,3.82,1.39-.15,21.15-12.84,23.57,1.43,1.42,8.42-16.66,10.85,6.52,10.02,13.43,10.85,3.4-4.13,11.03-2.86,3.85.64,7.23,7.99,8.02,11.45,12.58-14.24,24.58-1.3,21.56,4.29-.6,1.11-25.67,10.18-2.51,10.97,4.71,18.9,9.82,1.73,16.05,1.91.44.01,7.44,3.87,7.52,4.29.16.81-12.92,11.52-2.51,11.93,1.63.06,7.18-4.82,8.02-4.77.46.02,6.56,5.73,7.02,5.73,5.12-.03-2.18-15.45,17.05,9.54,3.62-1.83,5.94-5.54,10.53-5.73Z\"/> <path class=\"cls-sea-17\" d=\"M566.09,81.21c21.39,4.82,38.13,4.45,39.61,5.73,7.29,6.27-25.01,1.83-14.04,8.59,3.78,2.33,73.98,27.14,84.24,30.53,30.64,10.14,80.73,24.92,111.82,32.44-3.73,1.41-17.95-2.16-24.57-3.82-62.07-15.56-131.49-39.78-190.04-64.88-1.75-.95-8.96-5.74-9.53-5.73-.74.02-8.37,7.44-11.03,6.68-.83-.24-8.49-13.22-10.03-13.36-.95-.09-12.99,11.7-15.54.95h1c12.06,8.32,10.35-14.05,25.57,10.5q6.27-3.82,12.54-7.63Z\"/> <path class=\"cls-sea-21\" d=\"M730.06,36.36c6.17-1.61,11.64,5.13,6.02,8.59-9.18,5.64-12.83-6.81-6.02-8.59Z\"/> </g> </g> </g> <g> <path class=\"cls-sea-4\" d=\"M526.98,78.35c2.55,10.74,14.59-1.04,15.54-.95,1.54.14,9.2,13.12,10.03,13.36,2.66.76,10.29-6.66,11.03-6.68.56-.02,7.78,4.77,9.53,5.73,8.99,4.89,17.04,9.4,26.58,13.36,64.74,26.9,175.39,59.42,245.69,68.7.99.23-.33,1.65-1,1.91-2.24.88-42.49,9.78-47.13,10.5-11.45,1.77-23.03,2.28-34.6,2.86-94.36,4.72-116.28-29.39-135.38-34.35-36.02-9.35-107.81,16.21-147.42,25.76-17.9-4.3-36.27-7.14-54.15-11.45-5.66-1.37-11.38-3.32-17.05-4.77-70.02-17.92-137.83-41.99-205.58-66.32,8.03-4.96,11.67-12.57,12.54-12.88,2.22-.8,7.34,4.09,10.03,2.86,1.96-.9,1.04-6.88,2.01-7.63,1.44-1.12,8.31,4.9,9.03,4.77,1.43-.27,2.52-5.35,4.01-5.73,2.04-.51,8.44,6.04,10.03,4.77,3.24-2.59-6.08-13.7,12.03-1.91-.51-22.59,17.75-10.59,20.06-11.45.73-.27,3.52-8.28,5.01-8.59,1.53-.32,8.48,5.75,9.03,5.73,4.14-.23,3.35-13.18,16.05-2.86,10.56-15.93,14.84,1.56,18.05,1.91,9.3,1.01-1.03-15.68,17.55-10.02.43-19.28,14.07-4.75,14.04-13.36,0-2.03-18.27-13.74,8.52-17.65.6-.09,1.62,3.71,10.53-1.91,7.27,4.28,5.34,13.25,12.54,10.5,3.15-1.21-3.01-5.14,1.5-12.88,4.82-8.28,18.78-8.34,22.06-.95,5.59,12.57-17.71,10.7-11.53,13.84,8.84,4.49,15.07-7.49,16.05-7.63.89-.13,6.69,5.84,13.04-.95,10.82,7.87-.16,6.62-.5,10.02-.86,8.51,15.99-1.82,16.05,5.73.01,2.13-19.33,12.44,6.52,5.25,14.9,18.24,8.36-9.18,22.56,8.11-16.7,15.96,3.91,8.06,6.52,9.06,1.49.58,2.19,8.67,7.02,9.54,8.46,1.52,1.13-4.71,4.01-6.68.21-.14,4.81.81,5.01.95,5.88,4.11-8.37,10.6,26.07,3.82l1.5,1.43c.04.42-4.23,2.02-3.01,7.16Z\"/> <path class=\"cls-sea-16\" d=\"M381.57,22.05c-8.91,5.62-9.93,1.82-10.53,1.91-26.8,3.91-8.53,15.63-8.52,17.65.03,8.61-13.61-5.92-14.04,13.36-18.58-5.66-8.25,11.03-17.55,10.02-3.21-.35-7.49-17.84-18.05-1.91-12.69-10.32-11.91,2.63-16.05,2.86-.54.03-7.5-6.04-9.03-5.73-1.5.31-4.28,8.32-5.01,8.59-2.31.86-20.57-11.14-20.06,11.45-18.11-11.79-8.8-.68-12.03,1.91-1.59,1.27-7.99-5.28-10.03-4.77-1.49.37-2.58,5.46-4.01,5.73-.72.13-7.59-5.89-9.03-4.77-.96.75-.04,6.73-2.01,7.63-2.68,1.23-7.81-3.66-10.03-2.86-.86.31-4.51,7.92-12.54,12.88,67.75,24.33,135.56,48.4,205.58,66.32l-1,2.86c-69.43-16.21-166.24-47.89-231.15-76.34-13.84-6.06-25.5-15.27-27.08-15.27-6.73,0-.34,18.31-21.06-10.5l-9.03,10.5c-.56,0-4.53-6.47-5.52-7.63,15.25,12.06,4.79-22.25,28.58,11.45,7.87-10.92,13.34.36,30.08,7.63,8.79,3.82,18.37,6.4,27.08,10.5,12.11-5.5,14.13-14.91,16.05-15.27,1.56-.29,7.6,3.95,8.02,3.82,1.6-.51.99-13.9,11.03-3.82,8.65-9.45,11.23,0,14.04-1.91.9-.61.1-11.58,11.03-.95,7.6-25.42,18.5-1.87,28.08-19.08,13.83,9.79,11.79-1.3,16.05-1.91,2.19-.31,7.55,4.8,8.02,4.77.68-.04,6.11-6.45,7.02-6.68,10.95-2.73,10.32,21.24,18.05-2.86,18.78,6.06,3.1-11.57,22.56-9.06-12.77-20.57,5.11-19.25,16.55-19.56.25,0,2.65-2.4,4.01-2.86,2.15-.38,1.38,1.84,1.5,1.91Z\"/> <g> <path class=\"cls-sea-2\" d=\"M113.82,65.94c.99,1.17,4.96,7.63,5.52,7.63l9.03-10.5c20.72,28.81,14.33,10.5,21.06,10.5,1.57,0,13.24,9.2,27.08,15.27,64.91,28.44,161.72,60.13,231.15,76.34,5.62,1.31,11.4,2.59,17.05,3.82,17.01,3.7,34.3,6.12,51.14,10.5-20.42,4.89-40.5,10.35-61.17,14.31,0-.64.24-1.74-.5-1.91-9.64-2.2-50.69-6.86-67.69-9.54-38.27-6.03-83.33-11.89-117.83-29.58-8.22-4.21-15.31-11.33-23.57-15.27-26.12-12.47-63.74-3.42-91.26,2.86-38.22,8.72-74.68,24.05-113.32,31.49-.06-42.62-.04-85.24,0-127.86,30.49,9.02,7.32-6.37,8.02-10.02,1.44-7.49,16.41-4.35,21.56-2.39-2.05-26.5,7.55-9.55,9.03-9.54,1.77,0,19.22-19.42,25.57,4.29-20.69,13.84-1.79,1.57,7.52,9.06,4.93,3.97,2.19,13.65,9.03,11.45,3.5-1.13-.56-10.06,3.01-10.5,15.01,9.39-5.41,13.15,5.01,15.27,2.49.51,21.47-4.62,9.53,10.02,10.61,8.1,5-7.58,15.04,4.29Z\"/> <path class=\"cls-sea-10\" d=\"M479.85,178.54c-1.33.32-2.68.63-4.01.95-16.84-4.38-34.14-6.79-51.14-10.5l1-1.91c17.89,4.31,36.25,7.15,54.15,11.45Z\"/> <path class=\"cls-sea-12\" d=\"M425.7,167.09l-1,1.91c-5.65-1.23-11.43-2.5-17.05-3.82l1-2.86c5.67,1.45,11.39,3.41,17.05,4.77Z\"/> </g> </g> <g> <g> <path class=\"cls-sea-7\" d=\"M492.89,211.94c3.54,4.61,18.06,2.06,29.58,2.86,52.82,3.66,72.08,29.44,142.4,33.4,48.5,2.73,96.44-4.1,144.41-9.54,77.77,15,139.09,22.21,218.12,5.73-.04,21.33,1.12,114.51,0,121.18H.5c-1.14-6.78.05-106.56,0-128.82,78.04,14.78,159.13,3.33,235.16-16.22,2.7-.7,10.17-2.68,9.53-4.77,1.12-.05,2.08.3,2.01-.95,17.97.61,36.2.12,54.15-.95-.83,5.86,11.14,2.52,13.54,2.86.8.11.2,1.79,1,1.91,17.65,2.58,36.83,5.12,54.65,5.73,34.13,1.17,47.5-2.95,77.22-6.68,16.1-2.02,22.61-4.81,45.13-5.73Z\"/> <path class=\"cls-sea-11\" d=\"M1027.39,207.16c-.02,10.81.03,21.63,0,32.44-69.34,15.97-141.33,9.41-210.59-3.34,69.59-14.35,139.95-21.49,210.59-29.1Z\"/> <path class=\"cls-sea-20\" d=\"M1027.39,203.35c0,1.27,0,2.54,0,3.82-70.64,7.62-141,14.75-210.59,29.1,69.27,12.75,141.26,19.31,210.59,3.34,0,1.59,0,3.18,0,4.77-79.02,16.49-140.34,9.27-218.12-5.73-47.97,5.44-95.91,12.27-144.41,9.54-70.33-3.96-89.59-29.74-142.4-33.4-11.52-.8-26.05,1.74-29.58-2.86,81.87-3.32,87.53,27.6,179.01,31.49,94.97,4.04,167.99-19.52,252.71-30.53,28.16-3.66,61.64-5.68,90.76-8.59,4.02-.4,7.88-1.54,12.03-.95Z\"/> <path class=\"cls-sea-20\" d=\"M245.19,215.75c.65,2.09-6.82,4.08-9.53,4.77-76.03,19.55-157.13,31-235.16,16.22,0-1.91,0-3.82,0-5.73,17.64,3.05,35.74,5.88,53.65,6.68,89.3,3.98,128.76-15.28,187.03-21.95,1.3-.15,2.69.05,4.01,0Z\"/> <path class=\"cls-sea-10\" d=\"M247.19,214.8c.08,1.25-.89.91-2.01.95-1.32.05-2.71-.15-4.01,0v-.95c2,.1,4.02-.07,6.02,0Z\"/> </g> <g> <g> <path class=\"cls-sea-8\" d=\"M40.61,167.09c9.6,2.47,27.77-.33,36.6,1.91,7.63,1.94,9.6,16.43,72.71,29.58-2.18,3.08-18.55-3.98-19.05-1.43,36.14,7.52,73.07,15.86,110.31,17.65v.95c-58.26,6.67-97.73,25.93-187.03,21.95-17.92-.8-36.02-3.63-53.65-6.68-.04-18.45.03-36.9,0-55.34,8.47-1.5,17.22-2.78,25.57-4.77,2.86-.68,10.45-4.61,11.03-4.77,1.27-.34,1.77,1.43,3.51.95Z\"/> <g> <path class=\"cls-sea-20\" d=\"M40.61,167.09c-1.74.48-2.24-1.3-3.51-.95-.58.16-8.17,4.09-11.03,4.77-8.35,2-17.1,3.27-25.57,4.77,0-1.27,0-2.54,0-3.82,38.64-7.44,75.1-22.77,113.32-31.49l4.01,3.34c-25.91,6.43-51.45,16.28-77.22,23.38Z\"/> <path class=\"cls-sea-6\" d=\"M205.07,137.51c-1.58,3.03,21.76,17.27,27.58,20.04,9.61,4.57,21.79,8.49,32.09,11.45,10.58,3.04,72.13,15.2,79.22,15.27.16,0,2.49-1.31,2.51-1.91,17,2.68,58.05,7.34,67.69,9.54.75.17.51,1.27.5,1.91-92.06,17.63-171.89,24.12-264.75,4.77-63.11-13.15-65.07-27.64-72.71-29.58-8.83-2.24-27,.57-36.6-1.91,25.76-7.1,51.31-16.94,77.22-23.38l-4.01-3.34c27.51-6.28,65.14-15.33,91.26-2.86Z\"/> <path class=\"cls-sea-19\" d=\"M346.47,182.36c-.02.59-2.35,1.91-2.51,1.91-7.1-.06-68.64-12.22-79.22-15.27-10.3-2.96-22.48-6.88-32.09-11.45-5.82-2.77-29.16-17-27.58-20.04,8.25,3.94,15.35,11.06,23.57,15.27,34.5,17.68,79.56,23.55,117.83,29.58Z\"/> </g> </g> <g> <path class=\"cls-sea-5\" d=\"M615.23,162.32c2.08,2.47,3.87,5.21,6.02,7.63.25.28-.51,1.89.5,2.86,21.95,20.92,116.88,19.29,147.92,17.18,46.45-3.17,129.04-25.72,136.89-23.85,11.71,14.67,36.59,23.97,55.16,27.67,1.61.32,5.66.3,5.52-.95,15.96,4.26,32.26,6.95,48.14,11.45-29.12,2.91-62.59,4.93-90.76,8.59-84.72,11.01-157.75,34.58-252.71,30.53-91.48-3.89-97.14-34.81-179.01-31.49-22.52.91-29.03,3.71-45.13,5.73-.96-2.05,2.1-1.98,2.01-2.39-1.58-6.47-9.1-.43-14.54.48-3.66.61-26.82,2.26-28.08,2.86-1.68.8,1.62,2.89,0,3.82-1.68.96-34.62-4.11-36.6,1.91-17.83-.61-37-3.14-54.65-5.73-.8-.12-.2-1.79-1-1.91-2.4-.34-14.37,2.99-13.54-2.86,79.21-4.74,183.67-30.31,260.74-52.48l47.63-1.91c1.69.43,4.75,2.72,5.52,2.86Z\"/> <path class=\"cls-sea-20\" d=\"M627.27,152.78c.68,4.48,8.68,1.7,2.01,4.77-7.07-1.97-15.2-2.86-22.56-2.86-10.06,0-35.08,3.09-44.63,6.68-77.07,22.17-181.52,47.74-260.74,52.48-17.95,1.07-36.19,1.57-54.15.95-2-.07-4.02.1-6.02,0-37.24-1.79-74.17-10.14-110.31-17.65.5-2.55,16.87,4.51,19.05,1.43,92.86,19.35,172.68,12.85,264.75-4.77,20.67-3.96,40.76-9.43,61.17-14.31,1.34-.32,2.68-.63,4.01-.95,39.61-9.56,111.39-35.11,147.42-25.76Z\"/> <path class=\"cls-sea-14\" d=\"M447.76,217.66c-29.72,3.73-43.09,7.84-77.22,6.68,1.98-6.02,34.92-.95,36.6-1.91,1.62-.93-1.68-3.02,0-3.82,1.26-.6,24.42-2.25,28.08-2.86,5.44-.91,12.96-6.95,14.54-.48.1.4-2.97.34-2.01,2.39Z\"/> <path class=\"cls-sea-20\" d=\"M787.72,158.5c20.11,4.87,40.49,8.75,60.67,13.36,18.58.09,45.92-17.62,62.18-6.68,10,6.73-3.89,11.49,56.66,27.67.15,1.25-3.91,1.28-5.52.95-18.57-3.7-43.45-13-55.16-27.67-7.85-1.87-90.44,20.69-136.89,23.85-1.88-2.52-7.53,1-7.02-2.86,11.57-.58,23.15-1.09,34.6-2.86,4.65-.72,44.9-9.62,47.13-10.5.67-.26,1.99-1.68,1-1.91-70.31-9.28-180.95-41.8-245.69-68.7-9.53-3.96-17.59-8.47-26.58-13.36,58.54,25.11,127.97,49.33,190.04,64.88,6.62,1.66,20.83,5.23,24.57,3.82Z\"/> <g> <path class=\"cls-sea-19\" d=\"M762.65,187.13c-.51,3.86,5.14.34,7.02,2.86-31.04,2.12-125.97,3.75-147.92-17.18-1.02-.97-.26-2.59-.5-2.86,2.01.01,3.6,1.75,5.01,2.86,7.62,5.95,12.04,5.85,20.56,9.54,20.15,3.38,40.75,5.69,61.17,3.82-16.74-1.6-33.44-5.46-48.64-12.4-4.78-2.18-9.26-5.25-14.04-7.63-2.64-1.32-5.68-5.7-16.05-8.59,6.68-3.07-1.33-.29-2.01-4.77,19.1,4.96,41.02,39.07,135.38,34.35Z\"/> <path class=\"cls-sea-15\" d=\"M629.27,157.55c10.37,2.89,13.4,7.27,16.05,8.59-5.46,2.81-5.58-4.06-10.53,1.91-4.96-3.92-12.84-4.52-19.56-5.73-.77-.14-3.83-2.43-5.52-2.86l-47.63,1.91c9.54-3.59,34.56-6.69,44.63-6.68,7.36,0,15.49.89,22.56,2.86Z\"/> <path class=\"cls-sea-18\" d=\"M645.32,166.13c4.78,2.39,9.26,5.45,14.04,7.63-.61,4.74-1.69,2.12-5.01,2.86,3.22-2.72-6.19-3.57-6.02-1.43.18,2.25,5.78,1.63,6.02,1.43-.21.05,1.4,1.86-2.51,1.91-7.24.1-25.64-8.88-25.57-5.73-1.42-1.11-3-2.85-5.01-2.86-2.14-2.42-3.93-5.16-6.02-7.63,6.72,1.21,14.59,1.81,19.56,5.73,4.95-5.96,5.07.9,10.53-1.91Z\"/> <path class=\"cls-sea-9\" d=\"M654.34,176.63c3.32-.74,4.41,1.88,5.01-2.86,15.19,6.94,31.89,10.81,48.64,12.4-20.42,1.87-41.02-.44-61.17-3.82-8.52-3.7-12.94-3.59-20.56-9.54-.07-3.15,18.33,5.82,25.57,5.73,3.91-.05,2.3-1.86,2.51-1.91Z\"/> <path class=\"cls-sea-11\" d=\"M654.34,176.63c-.23.2-5.84.82-6.02-1.43-.17-2.14,9.24-1.29,6.02,1.43Z\"/> </g> </g> </g> </g> </g> </g>';\n\ncontract SeaRenderer {\n  function render() public pure returns (string memory) {\n    return SVG;\n  }\n}\n"
    },
    "contracts/SkyRenderer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nstring constant START = '<g transform=\"translate(0,0)\"> <defs> <style>.cls-sky-1{fill: url(#linear-gradient-sky); stroke-width: 0px;}</style> <linearGradient id=\"linear-gradient-sky\" x1=\"511.76\" y1=\"10.19\" x2=\"512.24\" y2=\"865.99\" gradientTransform=\"translate(63.89) scale(.88)\" gradientUnits=\"userSpaceOnUse\">';\nstring constant END = '</linearGradient> </defs> <path class=\"cls-sky-1\" d=\"M1024,0v768.9H0V0h1024Z\"/> </g>';\nuint constant OFFSET1 = 2;\nuint constant OFFSET2 = 24;\nuint constant OFFSET3 = 58;\nuint constant OFFSET4 = 80;\nstring constant COLOR1 = \"#c391b4\";\nstring constant COLOR2 = \"#ce9f9b\";\nstring constant COLOR3 = \"#dfd061\";\nstring constant COLOR4 = \"#e3f9f7\";\n\ncontract SkyRenderer {\n  function render(uint _tokenId) public pure returns (string memory) {\n    return string(\n      abi.encodePacked(\n        START,\n        _buildStop(OFFSET1, COLOR1, _tokenId, 1),\n        _buildStop(OFFSET2, COLOR2, _tokenId, 2),\n        _buildStop(OFFSET3, COLOR3, _tokenId, 3),\n        _buildStop(OFFSET4, COLOR4, _tokenId, 4),\n        END\n      )\n    );\n  }\n\n  function _buildStop(\n      uint _offset,\n      string memory _color,\n      uint _tokenId,\n      uint _stopNumber\n    ) internal pure returns (string memory) {\n    return string(\n      abi.encodePacked(\n        '<stop offset=\"',\n        _buildOffsetValue(_offset, _tokenId, _stopNumber),\n        '\" stop-color=\"',\n        _color,\n        '\"/>'\n      )\n    );\n  }\n\n  function _buildOffsetValue(\n      uint _offset,\n      uint _tokenId,\n      uint _stopNumber\n    ) internal pure returns (string memory) {\n    bytes32 hash = keccak256(abi.encodePacked(_offset, _tokenId, _stopNumber));\n    uint rand = uint(hash);\n    uint change = rand % 20; // Produces a number between 0 and 19\n    uint newOffset = _offset + change;\n    if(newOffset >= 10) {\n      return string(\n        abi.encodePacked(\n          '.',\n          Strings.toString(newOffset)\n        )\n      );\n    } else {\n        return string(\n        abi.encodePacked(\n          '.',\n          '0', // 9 is .09, not .9\n          Strings.toString(newOffset)\n        )\n      );\n    }\n  }\n}\n"
    },
    "contracts/SunRenderer1.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nstring constant SVG = '<g transform=\"translate(750,100)\"> <defs> <style>.cls-sun1-1{fill: url(#linear-gradient-sun1);}.cls-sun1-1, .cls-sun1-2, .cls-sun1-3, .cls-sun1-4, .cls-sun1-5, .cls-sun1-6, .cls-sun1-7, .cls-sun1-8, .cls-sun1-9, .cls-sun1-10, .cls-sun1-11, .cls-sun1-12, .cls-sun1-13, .cls-sun1-14{stroke-width: 0px;}.cls-sun1-2{fill: #c56a7d;}.cls-sun1-3{fill: #dbba7d;}.cls-sun1-4{fill: #dccab3;}.cls-sun1-5{fill: #d77047;}.cls-sun1-6{fill: #b75470;}.cls-sun1-7{fill: #9f4659;}.cls-sun1-8{fill: #322d34;}.cls-sun1-9{fill: #e5d6cc;}.cls-sun1-10{fill: #e5ab3f;}.cls-sun1-11{fill: #faefbf;}.cls-sun1-12{fill: #e68d37;}.cls-sun1-13{fill: #eee5cb;}.cls-sun1-14{fill: #e7cba2;}</style> <linearGradient id=\"linear-gradient-sun1\" x1=\"132.91\" y1=\"35.81\" x2=\"121.45\" y2=\"39.34\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#dccebe\"/> <stop offset=\"1\" stop-color=\"#cdad6d\"/> </linearGradient> </defs> <g> <path class=\"cls-sun1-1\" d=\"M143.96,24.63c-1.52,1.93-3.48,3.58-4.8,5.67-9.35,6.4-8.61,17.21-15.58,15.26-.4-1.27-.95-.77-1.09-.87-3.1-2.11-3.47-7.9-4.36-8.28-1.84-.06-4.32,1.8-5.78,1.31,10.2-5.16,21.07-8.7,31.6-13.08Z\"/> <g> <path class=\"cls-sun1-4\" d=\"M25.61,88.27c-7.69,4.36-9.68,1.35-17.33,0-2.26-.4-4.84-.27-7.08-.87,5.58-2.33,11.39-3.64,17-6.76-.05,2,2.22,4.16,3.81,5.23,2.33,1.56,3.91.8,3.6,2.4Z\"/> <path class=\"cls-sun1-3\" d=\"M25.61,88.27c.32-1.59-1.27-.83-3.6-2.4-1.59-1.07-3.87-3.23-3.81-5.23,2.95-1.64,6.06-3.99,8.28-6.54.56,6.34,1.48,6.54,5.23,11.01-3.71.4-4.37,2.18-6.1,3.16Z\"/> </g> <g> <path class=\"cls-sun1-4\" d=\"M166.2,86.75c-9.92.89-16.75,7.11-23.54,3.27,3.13-1.41,14.44-5.36,12.64-7.85,3.51,1.81,7.22,3.15,10.9,4.58Z\"/> <path class=\"cls-sun1-3\" d=\"M155.3,82.17c1.8,2.49-9.51,6.44-12.64,7.85-7.48-4.22,3-4.37,8.06-10.46,1.48.92,3.03,1.82,4.58,2.62Z\"/> </g> <path class=\"cls-sun1-9\" d=\"M150.94,62.56l-14.93-3.92-.76-.33c-.11-.46.24-.61.22-.76h22.12c-1.95,1.99-4.51,3.28-6.65,5.01Z\"/> <path class=\"cls-sun1-4\" d=\"M144.62,109.85c4.04,2.91,8.59,5.25,12.64,8.17-.27.44-6.06-.1-6.97-.11l-13.73-9.05,8.06.98Z\"/> <path class=\"cls-sun1-9\" d=\"M33.02,57.76c.53.16-.28.45-.65.65-2.38,1.31-10.48,3.02-13.73,3.92-.65-.57-5.22-4.02-5.34-4.36l.22-.44,19.51.22Z\"/> <g> <g> <path class=\"cls-sun1-3\" d=\"M44.14,136.88c-2.84-1.05-5.8,4.25-11.77.44,1.54-5.95,2.05-12.21,2.62-18.31.1.01,1.66-.17,2.07-.22l1.09.44c1.14,1.39,3.92,2.88,4.9,4.47,2.09,3.36,2.16,9.54,1.09,13.19Z\"/> <path class=\"cls-sun1-4\" d=\"M44.14,136.88c-1.17,4.01-3.86,5.15-7.3,7.19-2.01,1.19-6.84,2.91-7.3,4.14-.34.09-1.77.62-1.96.33,2.28-3.35,3.78-7.32,4.8-11.23,5.97,3.81,8.93-1.48,11.77-.44Z\"/> </g> <g> <path class=\"cls-sun1-4\" d=\"M34.33,107.89c-.35,5.74-10.31,8.16-14.39,10.68-3.07.04-6.2.25-9.26.44.38-.6,1.95-1.07,2.72-1.53,1.55,1.06,1.18.59,2.18,0,.68.94,1.81.89,2.94.44.62-.25,9.68-6.94,10.46-8.28l5.34-1.74Z\"/> <path class=\"cls-sun1-14\" d=\"M34.33,107.89l-5.34,1.74c-.78,1.34-9.84,8.03-10.46,8.28-1.14.45-2.26.51-2.94-.44,1.4-.82,11.16-7.88,10.9-9.59.33-.31.42-.2.44-.22,3.41,1.45,7.62-3.24,7.41.22Z\"/> <path class=\"cls-sun1-13\" d=\"M15.58,117.48c-1,.59-.63,1.06-2.18,0,4.35-2.55,9.44-6.1,13.08-9.59.26,1.71-9.5,8.77-10.9,9.59Z\"/> </g> </g> <path class=\"cls-sun1-4\" d=\"M80.76,28.12c-1.75-.16-.56-4.04-3.16-5.01-1.06-.4-5.21-.13-5.45,0-.39.21-4.13,6.36-5.23,7.19-1.45,1.09-5.84,1.89-7.63,2.62-1.12.45-1.01,1.4-2.62,1.09l-.98,1.53c.62-6.58.2-13.25.54-19.83l10.68,13.73c3.25-3.19,8.19-13.12,9.26-14.49.18-.22.6-.05.65-.11.36-.39.94-.78,0-.87.27-.69,6.35-12.67,6.76-13.3.62,2.04,1.09,5.45,1.31,7.74.72,7.75,1.23,13.5-4.14,19.73Z\"/> <path class=\"cls-sun1-3\" d=\"M80.76,28.12c-4.29,4.97-11.27,7.74-16.67,11.33-.79-.27-2.12.5-2.83.65-.37.08-3.16-.5-5.01.87-2.96.09-12.54.52-14.17.87-.36.08-.84.72-1.2.87-.64-2.11-1.66-4.03-2.4-6.1.75-1.41,4.45-.18,5.23-1.09,2.87.84,5.69,1.67,8.72,1.74,1.06.27,2.11.56,3.16.87.24-.17.07-2.15.11-2.62l.98-1.53c1.6.31,1.5-.64,2.62-1.09,1.79-.73,6.18-1.52,7.63-2.62,1.1-.83,4.84-6.98,5.23-7.19.24-.13,4.38-.4,5.45,0,2.6.97,1.42,4.85,3.16,5.01Z\"/> <g> <path class=\"cls-sun1-4\" d=\"M27.35,26.16c2.25,1.35,4.41,2.73,6.76,3.92-.5.5.39.54,1.53,1.2-.75,1.55,4,2.83,5.45,3.38-3.12,1.35-3.56-.71-2.62,1.96.73,2.07,1.75,3.99,2.4,6.1.78,2.56,1.49,4.66,1.09,7.41-.4-1.06-3.62-1.22-3.05-2.07.1-.15,1.17-.1,1.09-.44-.09-.37-6.24-2.35-7.19-.54-.54-5.7-1.45-11.38-3.71-16.67-1.75-4.1-3.82-5.49-1.74-4.25Z\"/> <path class=\"cls-sun1-3\" d=\"M41.96,50.13c-.05.35-.18,1.77-.22,1.85-.65,1.42-5.6,5.31-7.96,4.9-.09,1.22-.99,2.07-1.42,1.53.37-.21,1.18-.49.65-.65.64-2.09.02-8.19-.22-10.68.95-1.8,7.1.17,7.19.54.08.33-.99.29-1.09.44-.56.85,2.65,1.01,3.05,2.07Z\"/> <path class=\"cls-sun1-9\" d=\"M52.42,37.27c-3.03-.07-5.85-.91-8.72-1.74-.94-.27-1.7-.53-2.62-.87-1.45-.54-6.2-1.83-5.45-3.38-1.14-.66-2.03-.7-1.53-1.2,4.9,2.49,13.07,5.84,18.31,7.19Z\"/> </g> <path class=\"cls-sun1-11\" d=\"M112.14,13.51c-3.06,3.07-9.11,12.44-12.64,14.39,2.29-2.32,11.28-14.7,11.99-15.37.94-.88.55-.63.65.98Z\"/> <path class=\"cls-sun1-4\" d=\"M76.83,14.82c-.37-.51-.16-.48,0-.87.94.09.36.48,0,.87Z\"/> <path class=\"cls-sun1-4\" d=\"M43.7,35.53c-.79.91-4.48-.33-5.23,1.09-.95-2.67-.51-.61,2.62-1.96.91.34,1.68.6,2.62.87Z\"/> <g> <path class=\"cls-sun1-10\" d=\"M99.5,27.9c3.53-1.94,9.58-11.32,12.64-14.39.29,4.67-.58,23.29.22,24.19,1.46.49,3.94-1.37,5.78-1.31.89.38,1.26,6.18,4.36,8.28.14.1.69-.4,1.09.87,6.97,1.95,6.23-8.86,15.58-15.26-3.16,5.02-4.7,21.49-3.71,27.25.03.15-.33.3-.22.76l.76.33,14.93,3.92c-3.48,2.83-6.65,6.12-10.24,8.83,2.96,3.15,6.36,5.89,10.03,8.17-5.07,6.09-15.54,6.24-8.06,10.46,6.79,3.84,13.62-2.38,23.54-3.27.67.26,1.35.56,2.07.65v.44c-10.27,4.62-17.94,13.43-28.23,18.2-.1.28,4.06,3.44,4.58,3.81l-8.06-.98,13.73,9.05c-1.71-.02-14.93-.36-15.26.33.49,9.79,2.23,19.49,5.78,28.66-9.13-4.52-18.73-8-27.68-12.86l-.11,24.52-13.4-14.49q-7.63,15.26-15.26,30.51c-5.19-9.36-10.02-18.94-15.91-27.9q-5.83,7.36-11.66,14.71l-.33-25.61c-7.16,7.47-17.26,9.9-26.92,12.42.46-1.23,5.3-2.95,7.3-4.14,3.44-2.04,6.13-3.18,7.3-7.19,1.07-3.64,1-9.83-1.09-13.19-.99-1.58-3.77-3.08-4.9-4.47l-1.09-.44c-.41.05-1.97.23-2.07.22-.02,0,.07-.42-.11-.44-2.56-.23-11.3-.05-14.93,0,4.08-2.52,14.04-4.94,14.39-10.68.21-3.46-4,1.23-7.41-.22.22-.22,1.51-1.58,1.42-1.74-10.06-5.11-18.78-12.65-28.34-18.31.43-.11,1.12-.19,1.2-.22,2.24.6,4.83.47,7.08.87,7.65,1.35,9.64,4.36,17.33,0,1.73-.98,2.39-2.76,6.1-3.16-3.75-4.47-4.67-4.67-5.23-11.01.76-.87,1.43-1.84,2.18-2.72-3.34-3-6.65-6.08-10.03-9.05,3.25-.9,11.35-2.61,13.73-3.92.43.54,1.33-.3,1.42-1.53,2.36.41,7.31-3.49,7.96-4.9.04-.08.17-1.5.22-1.85.4-2.75-.31-4.85-1.09-7.41.36-.15.84-.79,1.2-.87,1.63-.36,11.2-.78,14.17-.87,1.86-1.37,4.64-.79,5.01-.87.72-.16,2.04-.92,2.83-.65,5.4-3.59,12.38-6.36,16.67-11.33,5.37-6.23,4.86-11.98,4.14-19.73-.21-2.29-.69-5.7-1.31-7.74.02-.04-.11-.36.33-.65l.33.33c3.92,9.87,10.28,18.56,14.49,28.23.24-.25.45-.48.76-.65Z\"/> <g> <path class=\"cls-sun1-12\" d=\"M81.08,35.75c9.35-.55,18.86,2.66,26.81,7.41,18.48,11.03,28.54,33.33,23,54.38-1.1,1.85-1.02,3.72-1.09,3.92-6.78,20.34-28.92,38.51-51.11,35.64-8.39-1.09-18.87-7.62-25.07-13.3-12.96-11.86-20.45-27.66-17.55-45.45l.65-.22c-1.03-1.62.9-1.81-.22-2.18,1.29-.92.41-1.43.44-1.53,1.77-6.96,6.73-16.65,11.55-22.01,7.32-8.15,21.59-16.03,32.59-16.67Z\"/> <path class=\"cls-sun1-8\" d=\"M79.77,41.19c18.24-1.41,36.44,8.32,44.79,24.74,9.94,19.55,4.24,42.23-12.97,55.47-20.5,15.77-46.86,12.85-63.1-7.3-25.34-31.45.88-70.56,31.28-72.91Z\"/> <g> <path class=\"cls-sun1-6\" d=\"M92.74,48.39c4.26,2.82,3.27-.27,1.53,5.01-12.87-4.82-24-1.45-33.35,8.06-7.38,7.51-10.6,15.12-10.68,25.72-.07,9.13,2.5,16.26,8.5,23.21,15.34,17.77,38.32,16.8,51.22-1.63,1.82-1,1.74,2.2,1.96,2.72.39.93,1.09.52,1.09,1.42-30.83,33.34-77.33.96-67.35-37.38,5.38-20.68,26.88-31.72,47.08-27.14Z\"/> <path class=\"cls-sun1-7\" d=\"M113.01,112.9c0-.9-.7-.49-1.09-1.42-.22-.52-.14-3.73-1.96-2.72,4.09-5.85,6.58-11.99,6.97-19.18.66-11.91-2.06-19.96-10.68-28.12-3.6-3.4-7.31-6.31-11.99-8.06,1.75-5.28,2.74-2.2-1.53-5.01,30.42,6.9,40.57,42.57,20.27,64.52Z\"/> <g> <path class=\"cls-sun1-5\" d=\"M116.94,89.58c-.4,7.19-2.88,13.33-6.97,19.18-12.91,18.43-35.88,19.4-51.22,1.63-6-6.95-8.57-14.08-8.5-23.21q33.18-.11,66.37-.22l.33,2.62Z\"/> <path class=\"cls-sun1-5\" d=\"M106.26,61.47c8.62,8.16,11.34,16.21,10.68,28.12l-.33-2.62q-33.18.11-66.37.22c.08-10.59,3.3-18.21,10.68-25.72h45.34Z\"/> </g> <path class=\"cls-sun1-2\" d=\"M94.27,53.4c4.68,1.75,8.39,4.66,11.99,8.06h-45.34c9.35-9.51,20.48-12.88,33.35-8.06Z\"/> </g> </g> </g> </g> </g>';\n\ncontract SunRenderer1 {\n  function render() public pure returns (string memory) {\n    return SVG;\n  }\n}\n"
    },
    "contracts/SunRenderer2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nstring constant SVG = '<g transform=\"translate(750,100)\"> <defs> <style>.cls-sun2-1{fill: url(#linear-gradient-sun2);}.cls-sun2-1, .cls-sun2-2, .cls-sun2-3, .cls-sun2-4, .cls-sun2-5, .cls-sun2-6, .cls-sun2-7, .cls-sun2-8, .cls-sun2-9, .cls-sun2-10, .cls-sun2-11, .cls-sun2-12, .cls-sun2-13{stroke-width: 0px;}.cls-sun2-2{fill: url(#linear-gradient-sun2-4);}.cls-sun2-3{fill: url(#linear-gradient-sun2-2);}.cls-sun2-4{fill: url(#linear-gradient-sun2-3);}.cls-sun2-5{fill: url(#linear-gradient-sun2-5);}.cls-sun2-6{fill: url(#linear-gradient-sun2-6);}.cls-sun2-7{fill: #f7f1ee;}.cls-sun2-8{fill: #622b30;}.cls-sun2-9{fill: #7c373d;}.cls-sun2-10{fill: #d0953e;}.cls-sun2-11{fill: #c67f3c;}.cls-sun2-12{fill: #ecc654;}.cls-sun2-13{fill: #e8b24e;}</style> <linearGradient id=\"linear-gradient-sun2\" x1=\"60.55\" y1=\"5.96\" x2=\"70.88\" y2=\"31.59\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#ecbc56\"/> <stop offset=\"1\" stop-color=\"#e19453\"/> </linearGradient> <linearGradient id=\"linear-gradient-sun2-2\" x1=\"13.65\" y1=\"43.06\" x2=\"28.34\" y2=\"58.19\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#e99756\"/> <stop offset=\"1\" stop-color=\"#dd7e60\"/> </linearGradient> <linearGradient id=\"linear-gradient-sun2-3\" x1=\"25.89\" y1=\"27.97\" x2=\"39.63\" y2=\"39.88\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#ebb057\"/> <stop offset=\"1\" stop-color=\"#e09152\"/> </linearGradient> <linearGradient id=\"linear-gradient-sun2-4\" x1=\"143.48\" y1=\"43.9\" x2=\"131.95\" y2=\"62.13\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#e79c55\"/> <stop offset=\"1\" stop-color=\"#de835e\"/> </linearGradient> <linearGradient id=\"linear-gradient-sun2-5\" x1=\"89.2\" y1=\"28.79\" x2=\"92.47\" y2=\"131.76\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#af5c5d\"/> <stop offset=\".12\" stop-color=\"#eda44d\"/> <stop offset=\".57\" stop-color=\"#c1616e\"/> <stop offset=\".9\" stop-color=\"#915162\"/> </linearGradient> <linearGradient id=\"linear-gradient-sun2-6\" x1=\"95.76\" y1=\"102.74\" x2=\"103.54\" y2=\"117.82\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#473033\"/> <stop offset=\"1\" stop-color=\"#0b0d0d\"/> </linearGradient> </defs> <g> <path class=\"cls-sun2-10\" d=\"M24.24,69.82c-1.65,7.36-1,14.86-.48,22.3-.47-.36-.88-.2-.97-.24-3.17-1.6-7.8-2.98-11.27-4.61-3.53-1.65-9.18-5.17-11.27-6.06-.11-.42.34-.6.61-.73,7.75-3.64,15.66-6.98,23.39-10.67Z\"/> <path class=\"cls-sun2-1\" d=\"M90.17,25.7c.05.1-.1.68.24,1.33.27.41,1.88,1.49,2.42,1.82-1.45.86-3.15-.43-4.73-.73-14.25-2.66-25.8-.81-38.18,6.54-.04-.44-.26,0-.97-.24l-3.03-29.57q12,10.54,24,21.09c1.89-3.48,8.81-24.44,9.57-25.57.12-.18.35-.43.61-.36,3.86,7.41,6.94,18.89,10.06,25.69Z\"/> <path class=\"cls-sun2-3\" d=\"M32.97,48.25s-.1.42.48,0c-5.63,6.94-6.62,11.58-8.48,20-.16.73-.72.56-.73.61L1.94,46.19c10.37-.15,20.89-.33,31.03,2.06Z\"/> <g> <path class=\"cls-sun2-13\" d=\"M110.29,33.7c-.08.06.3.41-1.45,1.33-.14.69,7.95,6.23,9.09,7.15,2.6,2.1,6.09,6.11,8.12,6.54,3.47,5.22,5.28,11.11,7.27,16.97-.68,2.32-1.93-3.7-3.15-6.18-4.85-9.85-14.49-17.85-23.63-23.63-5.22-3.3-11.96-6-13.7-7.03-.54-.32-2.15-1.4-2.42-1.82-.34-.65-.2-1.23-.24-1.33q12.06-10.79,24.12-21.57c-.66,9.95-2.63,19.72-4,29.57Z\"/> <path class=\"cls-sun2-12\" d=\"M127.5,45.1c-.21.49-.51.91-.73,1.45-.26.65-.74,1.34-.73,1.94v.24c-2.03-.44-5.52-4.45-8.12-6.54-1.14-.92-9.24-6.46-9.09-7.15,1.76-.92,1.38-1.27,1.45-1.33,1.66-1.27,22.41-11.3,26.79-13.57-1.43,5.35-9.07,22.1-9.57,24.97Z\"/> </g> <path class=\"cls-sun2-4\" d=\"M48.97,34.43c.71.24.93-.19.97.24-5.91,3.51-12.13,8.21-16.48,13.57-.59.42-.46,0-.48,0-4.29-8.81-7.34-18.22-10.06-27.63,4.53,2.06,24.66,13.34,26.06,13.82Z\"/> <path class=\"cls-sun2-9\" d=\"M33.69,113.7c-.38-.7-1.32,1.05-1.7,1.7,1.5-4.47.6-1.68-4.24-.97-1.41.21-25.56,1.5-26.91,1.45-.41-.01-.56.03-.85-.36,3.45-2.08,23.26-21.31,24-22.79.05-.1-.03-.38,0-.61,2.35,10.44,3.34,12.45,9.45,20.48.03.04.16.98.24,1.09Z\"/> <path class=\"cls-sun2-9\" d=\"M69.09,134.3c.1.02,2.14-.82,1.45.24-.84-.23-.74.58-1.45,1.45-4.67,5.75-18.34,16.1-24.6,21.82,1.29-8.91,3.11-17.69,4-26.66,4.62.72,10.12,2.75,14.67,4.36,2.44.86,3.24,1.8,3.39,1.7.28-.19-.04-.84.24-.97.2-.09-.02,2.12,2.79-1.82l-.48-.12Z\"/> <path class=\"cls-sun2-10\" d=\"M88.96,134.54c-.06.42.26.5.24.97-.05,1.03-.71,1.07,0,2.18-.45.39-.59,1.16-.73,1.7-2.75,7.03-5.47,14.08-8.85,20.85-2.48-5.52-5.12-11-7.39-16.6-.97-2.39-1.81-5.79-3.15-7.64.71-.88.61-1.68,1.45-1.45,5.97.39,12.47.85,18.42,0Z\"/> <g> <path class=\"cls-sun2-9\" d=\"M48.97,128.24c-.19.05-.31-.25-.36-.24-.62.15-6.91,4.01-11.15,6.06-5.26,2.54-10.75,4.69-16,7.27,3.42-6.78,7.44-19.94,10.3-25.45.82-.85,2.62,2.43,4.73,4.36.52.48,5.51,4.63,5.82,4.85.05.04.74-.07,1.21.24.72.48,3.12,3.41,3.88,1.94,1.02,1.48,1.48-.54,1.58.97Z\"/> <path class=\"cls-sun2-9\" d=\"M33.69,113.7c6.83,8.64,16.07,13.53,25.82,18.18,3.22.74,6.3,1.87,9.57,2.42l.48.12c-2.81,3.94-2.59,1.72-2.79,1.82-.28.13.04.78-.24.97-.16.1-.96-.83-3.39-1.7-4.54-1.61-10.05-3.64-14.67-4.36.12-1.23.51-2.45.48-2.91-.09-1.51-.55.51-1.58-.97-.76,1.47-3.15-1.46-3.88-1.94-.47-.31-1.16-.21-1.21-.24-.31-.21-5.3-4.37-5.82-4.85-2.1-1.94-3.91-5.21-4.73-4.36.08-.16.11-.26.24-.48.37-.65,1.32-2.39,1.7-1.7Z\"/> </g> <g> <path class=\"cls-sun2-10\" d=\"M135.99,70.31c1.97,1.16,21.77,9.06,22.66,9.94.7.69-1.54,1.57-4,2.91-5.68,3.08-11.61,5.81-17.57,8.24-.83.34-.56.71-.61.73-.06.02-.25-.25-1.21,0-.22-1.27,1.39-7.33,1.21-12.48-.2-5.73-2.96-10.4-.48-9.33Z\"/> <path class=\"cls-sun2-2\" d=\"M156.11,45.82c.31.41.23.68,0,1.09-.76,1.35-19.04,18.54-21.7,22.18-.44-1.11-.71-2.26-1.09-3.39-1.99-5.86-3.8-11.75-7.27-16.97v-.24c5.62-2.34,24.78-3.14,30.06-2.67Z\"/> </g> <path class=\"cls-sun2-9\" d=\"M137.2,94.55c4.5,3.75,15,15.7,21.33,20.73-8.85-.66-24.68.87-31.51-2.55.72-.73-.02.31.61,0,1.19-.59,3.26-4.06,4-5.45,3.73-7.02,3.85-14.46,5.58-12.73Z\"/> <g> <path class=\"cls-sun2-5\" d=\"M92.84,28.86c1.73,1.03,8.48,3.73,13.7,7.03,9.15,5.79,18.79,13.78,23.63,23.63,1.22,2.48,2.47,8.5,3.15,6.18.38,1.13.65,2.28,1.09,3.39,2.66-3.64,20.93-20.83,21.7-22.18.23-.41.31-.68,0-1.09.44.04.89-.03,1.33,0-6.9,8.22-15.65,15.34-22.66,23.63.02.09,1.01.73,1.21.85-2.48-1.06.29,3.6.48,9.33.18,5.16-1.43,11.21-1.21,12.48.05.29.81,1.05.97,1.45-.22-.14-1.51-1.06-1.7-.85-2.82,19.87-26.79,39.14-45.57,41.81-5.95.85-12.45.39-18.42,0,.68-1.06-1.35-.23-1.45-.24-3.28-.55-6.35-1.69-9.57-2.42-9.75-4.65-18.98-9.54-25.82-18.18-.09-.11-.21-1.05-.24-1.09-6.11-8.03-7.1-10.04-9.45-20.48h-.24c-.51-7.44-1.16-14.94.48-22.3.51-.65-.04-.77,0-.97,0-.05.57.12.73-.61,1.87-8.42,2.86-13.06,8.48-20,4.35-5.36,10.58-10.06,16.48-13.57,12.38-7.35,23.93-9.2,38.18-6.54,1.58.29,3.28,1.58,4.73.73Z\"/> <path class=\"cls-sun2-7\" d=\"M29.57,70.79c3.17-13.1,13.98-25.3,25.94-31.27,12.77-6.37,28.85-7.61,41.94-1.58-5.53,2.32-14,7.26-18.79,9.33-5.21,2.25-6.32-.84-11.15,8.48-3.15,2.39-10.34,3.57-12.24,6.67-2.56,4.17,1.06,11.22-9.33,10.3l-3.64,4.85c-4.33-2.17-7.82-5.83-12.73-6.79Z\"/> <path class=\"cls-sun2-6\" d=\"M128.6,80c.76,33.45-35.24,55.4-65.81,45.21,9.38-3.25,24.4-21.61,30.42-22.42,3.42-.46,8.4,1.91,10.42.97,2.04-.95,22.17-19.84,24.97-23.76Z\"/> <path class=\"cls-sun2-11\" d=\"M100.48,36.86c3.1.92,20.77,14.01,20.48,16.12-.33,2.44-2.73-3.02-4-1.33-4.54-6.04-16.57-12.11-17.45-12.85-.79-.67,1.25-.52,1.82-.36l-.85-1.58Z\"/> <path class=\"cls-sun2-9\" d=\"M55.51,39.52c-11.96,5.97-22.77,18.17-25.94,31.27-.84,3.48-.66.13-.48-1.09.12-.81.71-.91.73-.97,0-.04-.38-.21-.24-.73,1.47-5.4,7.1-11.55,4.12-11.15,1.96-2.39,3.08-3.76,4.73-6.18,1.83-.96,3.42-1.48,4.97-3.27.06-.07-.51-.38.48-1.45,3.3-3.54,14.46-11.09,11.64-6.42Z\"/> </g> <g> <path class=\"cls-sun2-9\" d=\"M127.99,115.15c-.43.58.22.92.24.97,3.17,8.52,6.93,16.93,9.82,25.45-5.84-3.24-20.35-8.87-24.6-12.36-.23-.19-2.25-1.93-2.18-2.06,4.42-2.55,10.12-7.07,13.94-10.54.73-.66,1.96-1.69,1.82-2.42.03.06.76.85.97.97Z\"/> <path class=\"cls-sun2-8\" d=\"M136.23,93.58c.49.32.64.69.97.97-1.73-1.73-1.85,5.71-5.58,12.73-.74,1.4-2.81,4.87-4,5.45-.62.31.11-.73-.61,0-.04.04-.46-.09-.48.12.29.6.45,1.27.48,1.33.14.73-1.09,1.76-1.82,2.42-3.82,3.47-9.52,8-13.94,10.54-.07.14,1.95,1.87,2.18,2.06l-2.79-1.45c-.31.24.07,2.38.12,2.91-1.87-2.2-3.86,1.22-5.45-.24l-.48.97c-1.98.08-6.92,3.06-8.73,3.64-.59.19-3.85.37-5.7,1.45-.34-.34-.82-.68-1.21-.97.02-.47-.31-.55-.24-.97,18.79-2.67,42.75-21.95,45.57-41.81.19-.21,1.48.71,1.7.85Z\"/> <path class=\"cls-sun2-9\" d=\"M110.78,130.67c.81,8.63,3.21,17.93,4,26.66-8.34-6.67-16.78-13.3-24.36-20.85,1.84-1.09,5.11-1.27,5.7-1.45,1.81-.58,6.75-3.56,8.73-3.64l.48-.97c1.59,1.46,3.59-1.96,5.45.24Z\"/> </g> </g> </g>';\n\ncontract SunRenderer2 {\n  function render() public pure returns (string memory) {\n    return SVG;\n  }\n}\n"
    },
    "contracts/SunRenderer3.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nstring constant SVG = '<g transform=\"translate(750,100)\"> <defs> <style>.cls-sun3-1{fill: url(#linear-gradient-sun3);}.cls-sun3-1, .cls-sun3-2, .cls-sun3-3, .cls-sun3-4, .cls-sun3-5, .cls-sun3-6{stroke-width: 0px;}.cls-sun3-2{fill: #f4b90a;}.cls-sun3-3{fill: #3d2908;}.cls-sun3-4{fill: #d0850d;}.cls-sun3-5{fill: #ef9f11;}.cls-sun3-6{fill: #f6ce6a;}</style> <linearGradient id=\"linear-gradient-sun3\" x1=\"81.21\" y1=\"128.64\" x2=\"83.87\" y2=\"152.25\" gradientUnits=\"userSpaceOnUse\"> <stop offset=\"0\" stop-color=\"#ed9c10\"/> <stop offset=\"1\" stop-color=\"#f4bb0b\"/> </linearGradient> </defs> <g> <path class=\"cls-sun3-1\" d=\"M64.33,124.8c10.34,4.74,22.23,4.01,33.02,1.26,1.56,11.12-7.38,14.55-11.43,21.71-4.26,7.55-1.38,18.17-6.51,14.97-3.34-2.09,1.13-6.45-1.49-13.6-2.51-6.87-11.73-8.07-13.6-24.34Z\"/> <g> <path class=\"cls-sun3-2\" d=\"M99.18,31.79l-.46.69c-.15-1.63-1.59-4.91-3.31-5.03-.3-.02-4.91,1.38-5.71,1.6-7.62.78-15.02,2.57-22.51,4.11,1.27-5.24,8.88-10.77,11.65-15.43,5.43-9.1.84-17.21,5.14-17.71,5.07-.59,1.72,7.91,2.17,12.91.76,8.56,9.3,10.37,13.03,18.85Z\"/> <path class=\"cls-sun3-5\" d=\"M98.72,32.48c.15,1.59-1.99,3.63-2.4,5.48,9.33,2.43,17.3,8.35,23.31,15.77,1.03-.9,3.55.12,4-1.37.05-.15.05-1.88,0-2.06h.46c.02.61.35,2.7.11,2.97l-4.8.91c-12.53-16.3-32.57-20.83-51.87-15.08-.82-2.14-.88-3.74-.34-5.94,7.49-1.54,14.88-3.33,22.51-4.11.8-.22,5.42-1.62,5.71-1.6,1.73.12,3.16,3.4,3.31,5.03Z\"/> </g> <g> <path class=\"cls-sun3-2\" d=\"M131.17,102.64c-.75-.92,1.94-.66,3.77-1.37.29-3.75.7-23.17.11-24.57-.22-.52-1.26-.55-1.14-1.26,3.76,2.01,8.96,7.12,12.91,8.91,7.39,3.35,14.6.31,16.11,4,2.06,5.02-7.59,2.81-14.51,5.83-4.46,1.94-8.34,7.33-17.25,8.46Z\"/> <path class=\"cls-sun3-5\" d=\"M133.91,75.44c-.12.71.93.74,1.14,1.26.58,1.4.18,20.82-.11,24.57-1.83.71-4.52.45-3.77,1.37-2.17.27-4.34.25-6.51.23,4-9.06,5.58-19.46,3.31-29.36l.34-.34c1.89.74,3.8,1.32,5.6,2.29Z\"/> </g> <g> <g> <path class=\"cls-sun3-2\" d=\"M30.16,66.3c-1.26,3.23-1.01,7.48-1.6,11.08-.76,4.62-2.06,9.39-3.2,13.94.05.31,3.88,1.97,4.46,2.17,1.84.64,5.67.95,3.77,1.37-5.02-.88-16.37-6.29-20.45-9.37-3.87-2.92-8.92-9.89-13.14-13.6.86-7.26,5.86-1.25,9.26-.11,8.6,2.88,15.36-3.72,20.91-5.48Z\"/> <path class=\"cls-sun3-5\" d=\"M33.59,94.87c1.9-.42-1.93-.73-3.77-1.37-.57-.2-4.41-1.86-4.46-2.17,1.14-4.55,2.44-9.32,3.2-13.94.59-3.6.34-7.86,1.6-11.08,2.91-.92,5.64-1.31,8.68-.57-3.71,9.4-4.08,19.68-1.83,29.48-.39.48-2.85-.24-3.43-.34Z\"/> </g> <g> <path class=\"cls-sun3-2\" d=\"M32.91,56.02c-3,3.31-7.15,6.33-10.17,9.37-.32.32-.42.4-.34.91-2.05-3.81-4.55-10.94-5.48-12.45-1.58-2.58-8.07-5.92-3.77-8.57,4.09-2.53,3.38,5.09,9.6,8.68,3.65,2.11,6.33,1.85,10.17,2.06Z\"/> <path class=\"cls-sun3-4\" d=\"M22.4,66.3c-.08-.51.03-.6.34-.91,3.02-3.04,7.16-6.06,10.17-9.37,2.61.14,5.27-.1,7.88,0,3.41,3.98.79,3.36-1.6,9.14-6.59-.92-9.9.13-15.31,3.66-.74-.04-1.2-1.99-1.49-2.51Z\"/> </g> </g> <g> <path class=\"cls-sun3-2\" d=\"M63.53,128.91c.19-.15.41.07.69-.69,0,.04.34-.12.23.8-.45,1.06-14.04,4.88-17.48,6.97-6.84,4.16-7.11,13.19-12.11,11.43-5.18-1.82,1.48-7.27,2.86-9.26,6.34-9.15,4.14-15.89,4.8-21.82-1.4,3.75,16.77,13.5,17.94,13.71.79.14,2.42-.62,3.09-1.14Z\"/> <path class=\"cls-sun3-5\" d=\"M64.21,128.23c-.27.76-.5.54-.69.69-3.44-2.87-8.07-4.62-11.77-7.31-4.46-3.25-7.56-7.2-8-7.54-.06-.05-.34.02-.57,0,.38-1.46.78-2.89,1.71-4.11,5.02,7.8,18.03,13.7,18.62,14.74.09.16.66,3.11.69,3.54Z\"/> <path class=\"cls-sun3-5\" d=\"M63.53,128.91c-.66.52-2.3,1.29-3.09,1.14-1.17-.22-19.34-9.96-17.94-13.71.09-.79.49-1.53.69-2.29.23.02.51-.05.57,0,.44.34,3.54,4.29,8,7.54,3.7,2.69,8.32,4.44,11.77,7.31Z\"/> </g> <g> <path class=\"cls-sun3-2\" d=\"M135.51,72.7c-.57-.18-.65-.44-.69-.46.69.19.49-2.18,1.14-4-1.52-2.29-7.12-13.44-8-14.4-.58-.63-1.08-.08-1.37-.57,17.84-4.19,15.48-11.13,19.77-13.71,2.81-1.7,6.42-.15,5.14,2.86-.19.44-4.59,4.41-6.63,6.86-8.14,9.77-6.74,11.87-9.37,23.42Z\"/> <path class=\"cls-sun3-5\" d=\"M126.6,53.27c.29.49.79-.06,1.37.57.88.96,6.47,12.11,8,14.4-.65,1.82-.45,4.19-1.14,4-6.38-3.15-8.14-12.8-10.74-16.57-.6-.87-1.4-.16-1.14-1.71,1.21-.26,2.44-.4,3.66-.69Z\"/> <path class=\"cls-sun3-4\" d=\"M122.94,53.96c-.26,1.55.54.84,1.14,1.71,2.6,3.77,4.36,13.41,10.74,16.57.04.02.12.27.69.46-.14.61-.07,2.58-.57,2.74l-7.2-3.09c-1.23-6.38-3.87-12.58-8-17.6.05-.35,2.73-.7,3.2-.8Z\"/> </g> <g> <path class=\"cls-sun3-2\" d=\"M42.05,113.15c.21.43.26.79.69.69-.18.28-.26.66-.34.69-14.77-5.1-23.3,7.32-25.59,8.23-2.37.94-4.98-1.1-4.23-2.63.48-.98,13.25-10.97,14.85-13.48,1.52-2.77,2-6.22,3.2-9.03l-.46,2.4c2.09,2.22,6.89,11.74,8.8,12.91.53.32,3.66,1.35,3.09.23Z\"/> <path class=\"cls-sun3-5\" d=\"M42.73,113.83c-.43.11-.48-.25-.69-.69-4.6-9.67-10.04-16.28-10.28-17.25-.08-.3.34-.42.23-.8l5.48,1.03c1.48,4.84,4.01,9.28,7.08,13.25-.91,1.18-1.57,4.04-1.83,4.46Z\"/> <path class=\"cls-sun3-5\" d=\"M42.05,113.15c.58,1.12-2.56.09-3.09-.23-1.9-1.17-6.71-10.69-8.8-12.91l.46-2.4c.21-.49.96-2.42,1.37-2.51.11.38-.3.5-.23.8.25.98,5.68,7.59,10.28,17.25Z\"/> </g> <g> <path class=\"cls-sun3-2\" d=\"M130.03,112.23l-.57-.46,2.86-.57c1.9-3.72,7.34-7.48,8.46-11.31,5.31,15.22,14.61,10.53,12.34,15.88-2,4.73-8.42-2.69-10.63-3.77-4.38-2.15-8.05-.54-12.45.23Z\"/> <path class=\"cls-sun3-4\" d=\"M135.28,102.41c2.94.31-7.03,5.81-7.54,7.2-.16.43.56,2.29.11,2.63-1.09.82-4.37-6.12-4.68-7.08.92-2.82,2.1-1.13,5.83-1.6,1.73-.22,4.64-.68,6.28-1.14Z\"/> <path class=\"cls-sun3-5\" d=\"M130.03,112.23c-.64.11-3.16.73-3.43.57-.41-2-3.82-6.47-3.88-6.86-.12-.71.44-.76.46-.8.32.97,3.6,7.9,4.68,7.08.45-.34-.27-2.2-.11-2.63.51-1.39,10.48-6.89,7.54-7.2,1.68-.47,3.93-1.64,5.48-2.51-1.11,3.83-6.55,7.59-8.46,11.31l-2.86.57.57.46Z\"/> </g> <g> <path class=\"cls-sun3-2\" d=\"M59.19,34.99c-1.6,0-3.39,1.46-4.91,2.51-4.01,2.77-15.19,11.66-13.37,16.91-1.84-5.7,1.35-12.95.23-19.31-.78-4.44-7-15.16-7.31-16.45-.64-2.65,2.48-3.45,4.46-2.63,2.59,1.07,1.05,7.72,7.31,13.03,3.91,3.31,8.86,4.48,13.6,5.94Z\"/> <path class=\"cls-sun3-5\" d=\"M59.19,34.99c1.85.57,3.66.85,5.48,1.6l-5.03,4.68c1.1.89-.82.61.23,1.26-7.08,3.93-12.35,9.07-16.8,15.77-.99-1.11-1.72-2.48-2.17-3.88-1.82-5.25,9.35-14.14,13.37-16.91,1.52-1.05,3.31-2.51,4.91-2.51Z\"/> <path class=\"cls-sun3-4\" d=\"M59.87,42.53c-1.05-.65.87-.37-.23-1.26l5.03-4.68c.37.15,1.55.19,1.83.57,1.99,2.67-1.99,2.8-6.63,5.37Z\"/> </g> <g> <path class=\"cls-sun3-2\" d=\"M101.46,128.69c-.07-.26.45-.43.46-.46h.23c.28.98,4.7,2.45,5.37,2.29,2.2-1.92,4.7-3.51,6.86-5.48,2.03-1.86,10.74-11.69,10.4-13.83-.03-.2-1.23-2.26-1.6-2.86.03-.02.25.05.23-.23,1.3,1.86,2.2,3.46,2.97,5.6-.03,7.8-.44,17.87,2.74,25.14.99,2.25,5.49,6.36,1.26,8.11-4.4,1.82-4.43-4.01-6.51-7.43-4.59-7.53-15.44-6.46-22.4-10.85Z\"/> <path class=\"cls-sun3-5\" d=\"M123.4,108.12c.02.28-.2.21-.23.23-1.23.83-5.69,14.05-21.02,19.88h-.23c.07-.21-.08-.69,0-.8.44-.63,5.29-3.61,4.8-5.6,6.33-3.64,11.74-9.47,15.65-15.54.55.71.97,1.74,1.03,1.83Z\"/> <path class=\"cls-sun3-4\" d=\"M106.72,121.83c.49,1.99-4.36,4.97-4.8,5.6-.08.11.07.59,0,.8-.01.03-.52.2-.46.46-.52-.33-3.66-2.58-3.43-3.09,2.86-1.19,6-2.22,8.68-3.77Z\"/> <path class=\"cls-sun3-5\" d=\"M102.15,128.23c15.34-5.83,19.8-19.05,21.02-19.88.37.6,1.57,2.66,1.6,2.86.35,2.13-8.37,11.97-10.4,13.83-2.16,1.98-4.65,3.56-6.86,5.48-.67.17-5.09-1.3-5.37-2.29Z\"/> </g> <g> <path class=\"cls-sun3-2\" d=\"M124.09,50.3h-.46c-.15-.58-.14-.31-.46-.69.32-.71.34-4.36.23-4.68-.28-.84-13.43-7.81-15.2-9.03-.76-.11-2.48.47-3.54.69,5.84-2.31,11.07-2.76,15.54-7.66,5.5-6.02,5.29-13.33,8.57-13.83,8.12-1.22-1.88,12.89-3.31,16.8-2.05,5.59-1.57,12.5-1.37,18.4Z\"/> <path class=\"cls-sun3-4\" d=\"M102.38,37.28c5.63,2.53,10.64,6,15.77,9.37-2.03-.02,3.39,3.98,5.48,5.71-.45,1.49-2.97.47-4,1.37-6.01-7.42-13.98-13.33-23.31-15.77.41-1.86,2.55-3.9,2.4-5.48l.46-.69c.63,1.43,1.29,3.99,1.83,5.6l.34.34c.27-.3.65-.37,1.03-.46Z\"/> <path class=\"cls-sun3-5\" d=\"M123.17,49.62c-.61-.71-3.98-2.28-5.03-2.97-5.13-3.37-10.14-6.84-15.77-9.37.72-.17,1.38-.5,2.29-.69,1.06-.22,2.78-.8,3.54-.69,1.77,1.21,14.92,8.19,15.2,9.03.11.33.09,3.97-.23,4.68Z\"/> <path class=\"cls-sun3-5\" d=\"M118.15,46.65c1.04.69,4.41,2.26,5.03,2.97.32.37.3.11.46.69.05.18.05,1.9,0,2.06-2.1-1.73-7.52-5.73-5.48-5.71Z\"/> </g> <g> <path class=\"cls-sun3-6\" d=\"M79.64,37.28c38.68-2.29,58.57,37.34,43.99,65.7-12.11,23.55-43.42,31.94-65.7,17.71-40.41-25.8-19.27-80.98,21.71-83.41Z\"/> <g> <path class=\"cls-sun3-3\" d=\"M78.73,46.19c32.14-2.56,51.76,33.66,34.62,57.7-15.32,21.49-49.84,19.34-63.3-2.51-14.13-22.94,2.2-53.08,28.68-55.19Z\"/> <path class=\"cls-sun3-2\" d=\"M78.73,46.65c31.57-2.62,51.84,33.94,33.48,57.93-15.49,20.24-48.92,17.8-61.93-3.88-13.52-22.54,2.62-51.9,28.45-54.05Z\"/> </g> </g> </g> </g>';\n\ncontract SunRenderer3 {\n  function render() public pure returns (string memory) {\n    return SVG;\n  }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}